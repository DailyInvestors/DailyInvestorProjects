          [Installs/Programs]
1.pip install requests
   install itertools
   pip install flask
   pip install Django
   pip install numpy
   pip install pandas
   pip install sqlalchemy
   pip install beautifulsoup4
   pip install pytest
   pip install notebook
   pip install â€“upgrade notebook
  pip install glob
  pip install signal
  pip install multiprocessing
  pip install moch
  pip install xgboosy
  pip install shutil
  pip install yara
  pip install virtualenv
  pip install ruby gems
  pip install scapy
  pip install impacket
  pip install shodan
  pip install python-nmap
  pip install sublist3r
  pip install mechanize 
  pip install sqlmap
  pip install subprocess
  pip install threading
  pip install passlib
  pip install wordlist
  pip install pycryptodome
  pip install spiderfoot
  pip install pymetasploit3
  pip install pyinstaller
  pip install colorama
  pip install termcolor
  pip install rich
  pip install hashcat
  pip install auditwheel
  pip install pwntools
  pip install flake8
  pip install safety
  pip install bandit
  pip install pip-audit
  
2. [Apt: (Example)]
import apt

cache = apt.Cache()
cache.update()
cache.open()
pkg = cache["nmap"]
if pkg.is_installed:
    print("Nmap is already installed")
else:
    pkg.mark_install()
    print("Installing Nmap...")

3.1. Core Concepts
 * Variables:
   * name = "value"
   * number = 42
   * boolean = True

 * Data Types:
   * int: Integers (e.g., 10, -5)
   * float: Floating-point numbers (e.g., 3.14, -2.5)
   * str: Strings (e.g., "Hello", 'world')
   * bool: Boolean (True or False)
   * list: Ordered collection (e.g., [1, 2, 3], ["apple", "banana"])
   * tuple: Immutable ordered collection (e.g., (1, 2, 3))
   * dict: Key-value pairs (e.g., {"name": "Alice", "age": 30})
   * set: Unordered collection of unique elements (e.g., {1, 2, 3})

2. Operators
 * Arithmetic: +, -, *, /, // (floor division), % (modulo), ** (exponentiation)
 * Comparison: ==, !=, >, <, >=, <=
 * Logical: and, or, not
 * Assignment: =, +=, -=, *=, /=

3. Control Flow
 * if statements:
   if condition:
    # code to execute if condition is True
elif another_condition:
    # code to execute if another_condition is True
else:
    # code to execute if no conditions are True

 * for loops:
   for item in iterable:
    # code to execute for each item

 * while loops:
   while condition:
    # code to execute as long as condition is True

 * break: Exits the current loop
 * continue: Skips the current iteration and moves to the next

4. Functions
 * Defining a function:
   def function_name(parameter1, parameter2):
    # code to be executed
    return result 

 * Calling a function:
   result = function_name(argument1, argument2)

5. Data Structures
 * Lists:
   * list_name = [] (create an empty list)
   * list_name.append(item) (add an item to the end)
   * list_name.insert(index, item) (insert an item at a specific index)
   * list_name.remove(item) (remove the first occurrence of an item)
   * list_name.pop(index) (remove and return the item at the given index)
   * list_name[index] (access an element by index)
   * list_name[start:end] (slice a portion of the list)

 * Dictionaries:
   * dict_name = {} (create an empty dictionary)
   * dict_name["key"] = "value" (add or update a key-value pair)
   * value = dict_name["key"] (access the value associated with the key)
   * keys(), values(), items() (methods to get keys, values, or key-value pairs)

6. Modules and Packages
 * Importing modules:
   import math
from math import pi, sin 
import my_module as mm 

 * Creating your own modules:
   * Save Python code in a file (e.g., my_module.py)
   * Import the module in other Python files

7. Object-Oriented Programming (OOP)
 * Classes:
   class MyClass:
    def __init__(self, attribute1, attribute2):
        self.attribute1 = attribute1
        self.attribute2 = attribute2

    def my_method(self):
        # code to be executed

 * Objects: Instances of a class
 * Attributes: Characteristics of an object
 * Methods: Functions that belong to an object
8. File Handling
 * Opening a file:
   file = open("filename.txt", "r")  # 'r' for reading, 'w' for writing, 'a' for appending

 * Reading from a file:
   content = file.read() 
line = file.readline() 
lines = file.readlines()

 * Writing to a file:
   file.write("some text")

 * Closing a file:
   file.close()

9. Exception Handling
 * try...except blocks:
   try:
    # code that might raise an exception
except ExceptionType:
    # code to handle the exception

10. Common Libraries
 * math: Mathematical functions (e.g., sqrt, sin, cos)
 * random: Generate random numbers
 * os: Interact with the operating system
 * sys: System-specific parameters and functions
 * datetime: Work with dates and times
 * requests: Make HTTP requests
 * pandas: Data manipulation and analysis
 * NumPy: Numerical computing
 * Matplotlib: Data visualization
This is a basic overview. For a deeper understanding, I recommend exploring official Python documentation and online resources.

