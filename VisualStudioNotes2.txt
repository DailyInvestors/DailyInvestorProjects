Visual Studio Notes 2

Accessibility:
â‡´Zoom:
You can adjust the zoom level in VS Code with the View > Appearance > Zoom commands. Each Zoom command increases or decreases the zoom level by 20 percent.

View > Appearance > Zoom In (âŒ˜= (Windows, Linux Ctrl+=)) - increase the zoom level.
View > Appearance > Zoom Out (âŒ˜- (Windows, Linux Ctrl+-)) - decrease the zoom level.
View > Appearance > Reset Zoom (âŒ˜Numpad0 (Windows, Linux Ctrl+Numpad0)) - reset the zoom level to 0.


â† Help:
The command Open Accessibility Help âŒ¥F1 (Windows Alt+F1, Linux Shift+Alt+F1) opens a help menu based on the current context. It currently applies to the editor, terminal, notebook, Chat view, and Inline Chat features.


â†¬High Contrast:
VS Code supports a High Contrast color theme on all platforms. Use File > Preferences > Theme > Color Theme (âŒ˜K âŒ˜T (Windows, Linux Ctrl+K Ctrl+T)) to display the Select Color Theme dropdown and select the High Contrast theme


â‡’Color:
You can search for extensions in Visual Studio Marketplace that are compatible with color vision deficiency. Use the Extensions view â‡§âŒ˜X (Windows, Linux Ctrl+Shift+X) and search for "color blind" to populate relevant options.



â›¬ Recomendations for Color:
GitHub - Accessible to most forms of color blindness and matches the themes in GitHub's settings.
Gotthard - Optimized for approximately 20 programming languages.
Blinds - Created for people with deuteranopia, featuring a high contrast color ratio.
Greative - Considers both color blindness and light sensitivity.
Pitaya Smoothie - Accessible to most forms of color blindness and compliant with WCAG 2.1 criteria for color contrast.
Customizing


â‡’ Assigning Colors by "Hex":
"workbench.colorCustomizations": {
    "editorError.foreground": "#ffef0f",
    "editorWarning.foreground": "#3777ff"
}


â™”Editor Tips:
editorError.foreground - Overrides the wavy line beneath an error.
editorWarning.foreground - Overrides the wavy line beneath a warning.
editorError.background - Overrides the highlight color of an error.
editorWarning.background - Overrides the highlight color of a warning.
Assigning a color to the background of editorError and editorWarning also helps to identify potential issues. The color that you choose will highlight the respective error or warning. The colors shown in the preceding example, #ffef0f (yellow) and #37777ff (blue), are more accessible to individuals with common forms of color vision deficiencies.



à²¡ Íœ Ê– à²¡ Keyboards Tips:
VS Code provides an exhaustive list of commands in the Command Palette (â‡§âŒ˜P (Windows, Linux Ctrl+Shift+P)) so that you can use VS Code without a mouse. Press â‡§âŒ˜P (Windows, Linux Ctrl+Shift+P), then type a command name (for example 'git') to filter the list of commands.

Key bindings for commands are displayed at the end of the command palette entry

You can also set your own keyboard shortcuts. File > Preferences > Keyboard Shortcuts (âŒ˜K âŒ˜S (Windows, Linux Ctrl+K Ctrl+S)) opens the Keyboard Shortcuts editor, where you can discover and modify keyboard shortcuts for VS Code actions. See Key Bindings for more details on customizing or adding your own keyboard shortcuts.

For quick navigation across the workbench, we recommend using Focus Next Part (F6) and Focus Previous Part (â‡§F6 (Windows, Linux Shift+F6)) commands.

â¯… selection
To make it easier to start and end selections with the keyboard, there are four commands: Set Selection Anchor (âŒ˜K âŒ˜B (Windows, Linux Ctrl+K Ctrl+B)), Select From Anchor to Cursor (âŒ˜K âŒ˜K (Windows, Linux Ctrl+K Ctrl+K)), Cancel Selection Anchor (Escape) and Go to Selection Anchor.

â¯… navigation
You can use the Tab key to navigate between UI controls in VS Code. Use Shift+Tab to tab in reverse order. As you tab through the UI controls, an indicator will appear around each UI element when it has focus.

â¯… trapping
By default, pressing Tab within a source code file inserts the Tab character (or spaces depending on your indentation setting) and does not leave the open file. You can toggle Tab trapping with âŒƒâ‡§M (Windows, Linux Ctrl+M), and subsequent Tab keys will move focus out of the file. When default Tab trapping is off, you will see a Tab moves focus indicator in the Status Bar.
Tab trapping also exists in the integrated terminal. The default behavior for the feature can be configured with .
You can also toggle Tab trapping on and off from the Command Palette (â‡§âŒ˜P (Windows, Linux Ctrl+Shift+P)) with the Toggle Tab Key Moves Focus action.

â¯…-only files never trap the Tab key. The Integrated Terminal panel respects the Tab trapping mode and can be toggled with âŒƒâ‡§M (Windows, Linux Ctrl+M).


â™” readers
Windows: NVDA and JAWS
macOS: VoiceOver
Linux: Orca
For NVDA, we recommend that you stay in focus mode and use the hotkeys to navigate, instead of using browse mode.

The Go to Next/Previous Error or Warning actions (F8 and â‡§F8 (Windows, Linux Shift+F8)) allow screen readers to announce the error and warning messages.

When suggestions pop up, they are announced to screen readers. Navigate the suggestions using Ctrl+Up and Ctrl+Down and dismiss them with Shift+Escape. If suggestions get in your way, you can turn them off with the setting.

In the diff view pane, the Go to Next/Previous Difference actions (F7 and â‡§F7 (Windows, Linux Shift+F7)) will show the Accessible Diff Viewer with diffs presented in a unified patch format. Navigate through the unchanged, inserted, or deleted lines with Up and Down. Press Enter to return focus to the modified pane of the diff editor at the selected line number (or the closest line number that still exists, if a deleted line is selected). Use Escape or Shift+Escape to dismiss the Accessible Diff Viewer.

â¯…Resize Tables:
The list.resizeColumn command enables you to resize columns by using the keyboard. You can assign a keyboard shortcut to trigger this command.


ðŸ ŠAccesible View:
Run the command Open Accessible View âŒ¥F2 (Windows Alt+F2, Linux Shift+Alt+F2) to display an Accessible View and inspect content character by character, line by line. 

â†£ Control and result navigation:
Navigating between an input control (for example, search or filter input) and its results is consistent across the Extensions view, the Keyboard Shortcuts editor, and the Comments, Problems, and Debug Console panels using (âŒ˜â†“ (Windows, Linux Ctrl+Down)) and (âŒ˜â†‘ (Windows, Linux Ctrl+Up)).

â†± Terminal Accessibility:
 âŒ¥F1 (Windows Alt+F1, Linux Shift+Alt+F1), which describes useful tips when using a screen reader. One tip is to use âŒ¥F2 (Windows Alt+F2, Linux Shift+Alt+F2) to access the buffer in the terminal. 



â‡‰ Shell Intergration:
The terminal has a feature called shell integration that enables many additional features that are not found in other terminals. When using a screen reader, the Run Recent Command and Go to Recent Directory features are particularly useful.
Another shell integration powered command, Go to Symbol in Accessible View (â‡§âŒ˜O (Windows, Linux Ctrl+Shift+O)), lets you navigate between terminal commands similar to Go to Symbol in Editor... navigation in the editor.


â†¬Debugger:
Debug hover is keyboard accessible (âŒ˜K âŒ˜I (Windows, Linux Ctrl+K Ctrl+I)).



â† Signals:
Accessibility Signal sounds and announcements may be enabled automatically when a screen reader is attached and can be controlled by the settings accessibility.signals.*.



~~~~~Command Line~~~~~
Launching Command Line = open terminal or command prompt, navigate to your project folder and type code .:

Note: Binaries
With Windows and Linux installations should add the VS Code binaries location to your system path. If this isn't the case, you can manually add the location to the Path environment variable ($PATH on Linux). For example, on Windows, the default VS Code binaries location is AppData\Local\Programs\Microsoft VS Code\bin. 

â†»Command Line Arguments:
Argument	Description
-h or --help	Print usage

-v or --version	Print VS Code version (for example, 1.22.2), GitHub commit ID, and architecture (for example, x64).

-n or --new-window	Opens a new session of VS Code instead of restoring the previous session (default).

-r or --reuse-window	Forces opening a file or folder in the last active window.

-g or --goto	When used with file:line{:character}, opens a file at a specific line and optional character position. This argument is provided since some operating systems permit : in a file name.

-d or --diff <file1> <file2>	Open a file difference editor. Requires two file paths as arguments.

-m or --merge <path1> <path2> <base> <result>	Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions, and the output file to save merge results.

-w or --wait	Wait for the files to be closed before returning.

--locale <locale>	Set the display language (locale) for the VS Code session. (for example, en-US or zh-TW)

file:	Name of a file to open. If the file doesn't exist, it will be created and marked as edited. You can specify multiple files by separating each file name with a space.

file:line[:character]	Used with the -g argument. Name of a file to open at the specified line and optional character position.

folder:	Name of a folder to open. You can specify multiple folders and a new Multi-root Workspace is created.

ðŸ¡ƒ can launch VS Code with a specific profile via the --profile command-line interface option. You pass the name of the profile after the --profile argument and open a folder or a workspace using that profile. The command line below opens the web-sample folder with the "Web Development" profile:

code ~/projects/web-sample --profile "Web Development"

If the profile specified does not exist, a new empty profile with the given name is created.

â†  with extensions
You can install and manage VS Code extensions from the command line.
--install-extension <extension-id> | <extension-vsix-path>	Install or update an extension. Provide either the full extension name publisher.extension or the path to a VSIX file as an argument. To install a specific version provide append @{version}. For example: vscode.csharp@1.2.3. Use --force argument to avoid prompts.

--uninstall-extension <extension-id>	Uninstall an extension. Provide the full extension name publisher.extension as an argument.

--disable-extensions	Disable all installed extensions. Extensions will still be visible in the Disabled section of the Extensions view but they will never be activated.

--list-extensions	List the installed extensions.

--show-versions	Show versions of installed extensions, when using --list-extensions

--enable-proposed-api <ext>	Enables proposed api features for an extension. Provide the full extension name publisher.extension as an argument.

--update-extensions	Update installed extensions and exit.



â‡¶ Advanced Line Commands
--extensions-dir <dir>	Set the root path for extensions.

Overridden in Portable Mode by the data folder.
--user-data-dir <dir>	Specifies the directory that user data is kept in, useful when running as root.

Overridden in Portable Mode by the data folder.
-s, --status	Print process usage and diagnostics information.

-p, --performance	Start with the Developer: Startup Performance command enabled.

--disable-gpu	Disable GPU hardware acceleration.

--verbose	Print verbose output (implies --wait).

--prof-startup	Run CPU profiler during startup.

--upload-logs	Uploads logs from current session to a secure endpoint.

â†¬ Multi-root	

--add <dir>	Add folder(s) to the last active window for a multi-root workspace.

--remove <dir>	Remove folder(s) from the last active window for a multi-root workspace.
Create remote tunnel


â™”Tunnels
code tunnel: to create a tunnel on your remote machine. You may connect to this machine through a web or desktop VS Code client.

Tunneling securely transmits data from one network to another via Microsoft dev tunnels.

Help:  code tunnel -help





